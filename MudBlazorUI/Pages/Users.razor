@page "/users"

@using System.Text.RegularExpressions

@*@inject UserService UserService*@
@inject IDataService DataService

@inject IDialogService DialogService
@inject ISnackbar Snackbar

<h1>User management</h1>

<MudToolBar Style="padding-left: 0;">
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.PersonAddAlt1" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="addUser">Add a user</MudButton>

    @* These buttons would make sense if we activate multiuser selection to apply actions on users *@
    @*<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="refresh">Refresh</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.PersonRemove" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="deleteUser">Delete user</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.VpnKey" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="resetPassword">Reset password</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.SupervisedUserCircle" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="manageRoles">Manage roles</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.Download" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="exportUser">Export user</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.AlternateEmail" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="editUser">Manage username and email</MudButton>*@
</MudToolBar>

@{
    string pattern = @"([(])?([+])?(\d{1})(\d{3})(\d{3})(\d{4})([)])?";
    string repl = @"+$3 ($4) $5-$6";
}

@if (editContext == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<style>
        .table table-stripped {
            color: darkred !important;
        }
    </style>*@

    <EditForm EditContext="editContext">
        <MudPaper Height="100vh" Style="overflow:hidden; position:relative;">
            <MudDrawerContainer Class="mud-height-full" Style="display: grid; overflow: auto;">

                <MudDrawer @bind-Open="@open" Fixed="false" Width="450px" MiniWidth="300px" Anchor="Anchor.End" Elevation="2" Variant="@DrawerVariant.Persistent" Color="Color.Primary">
                    @if (curUser != null)
                    {
                        <div style="display: flex;justify-content: left; justify-items: left;">
                            <div class="icon-east zoom-in-hover">
                                <MudIconButton Icon="@Icons.Material.Filled.East" OnClick="@CloseAndClear" Color="Color.Inherit"/>
                            </div>
                            <MudDrawerHeader Style="display: grid;justify-content: center; justify-items: center;padding-left: 6px;padding-right: 6px;">
                                <MudText Typo="Typo.h6">@curUser.FirstName @curUser.LastName</MudText>
                                <MudContainer Style="display: flex;column-gap: 12px;">
                                    <div class="zoom-in-hover">
                                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.VpnKey" OnClick="resetPassword" Color="Color.Inherit"
                                                   Style="text-transform: none; font-size: x-small;" Size="Size.Small">Reset password</MudButton>
                                    </div>
                                    <div class="zoom-in-hover">
                                        <MudButton Variant="Variant.Text" StartIcon=@(curUser.IsEnabled ? Icons.Material.Outlined.Block : Icons.Material.Outlined.Check) OnClick="blockSignIn" Color="Color.Inherit"
                                                   Style="text-transform: none; font-size: x-small;" Size="Size.Small">@(curUser.IsEnabled ? "Block sign-in" : "Allow sign-in")</MudButton>
                                    </div>
                                    <div class="zoom-in-hover">
                                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.PersonRemove" OnClick="deleteUser" Color="Color.Inherit"
                                                   Style="text-transform: none; font-size: x-small;" Size="Size.Small">Delete user</MudButton>
                                    </div>
                                </MudContainer>
                            </MudDrawerHeader>
                        </div>

                        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Color="Color.Dark" SliderColor="Color.Tertiary">
                            <MudTabPanel Text="Account">
                                <p class="pt-1">
                                    <MudText>@curUser.UserName</MudText>
                                    <MudText>@curUser.Email</MudText>
                                    <MudText>@curUser.MobileNbr</MudText>
                                    <div style="display: grid;margin-top: 5px;">
                                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="editUser">Manage username and email</MudButton>
                                    </div>
                                </p>
                            </MudTabPanel>
                            <MudTabPanel Text="Roles">
                                <div style="display: grid;grid-auto-columns: auto;grid-auto-flow: dense;">
                                    @foreach (var role in roles)
                                    {                                        
                                        @*<MudCheckBox @bind-Checked="@(new Action<User>((@curUser) => { curUser.Roles.Add(@role); }))" Label="@role.Name">@role.Name</MudCheckBox>*@
                                        <MudCheckBox T="bool" 
                                                     Checked="@((curUser?.UserRoles?.Where(r => r.RoleId == role.Id).Any()) ?? false)" 
                                                     CheckedChanged="@(e => OnRoleChecked(@role, e))" 
                                                     Color="Color.Secondary" Label="@role.Name" Style="color: white;" />
                                        @*<MudCheckBox T="bool" Color="Color.Secondary" Label="@role.Name"></MudCheckBox>*@
                                        @*<MudText Color="Color.Default">@role.Name</MudText>*@
                                    }
                                </div>
                            </MudTabPanel>
                            @* TabPanel could include more options/information *@
                            @*<MudTabPanel Text="Licenses and apps">
                                <MudText>Content Three</MudText>
                            </MudTabPanel>
                            <MudTabPanel Text="Mail" Disabled="true">
                                <MudText>Content Disabled</MudText>
                            </MudTabPanel>*@
                        </MudTabs>
                    }
                </MudDrawer>

                <FD.Blazor.Components.DataTable @ref="_table" TModel="User" Items="LoadUsers" RowClickedEvent="OnRowClicked"
                                                SortChanged="(c, d) => { this.SortColumn = c; this.SortDirection = d; }"
                                                ContainerCssClass="d-flex justify-center align-center mud-height-full"
                                                ContainerAttributes=@(new Dictionary<string, object>() { { "style", "width: 100%;" } })
                                                Styles=@(FD.Blazor.Core.TableStyle.Striped | FD.Blazor.Core.TableStyle.Hover)
                                                TableAttributes=@(new Dictionary<string, object>() { { "style", "width: 100%;" } })
                                                AllowRowSelection="true"
                                                HideVirtualizePlaceholder="true" VirtualizePlaceholder=@((e) => e.AddMarkupContent(1,"<p><em>Loading...</em></p>"))>
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => e.UserName"
                                                          IsDefaultSortColumn="true" DefaultSortDirection="FD.Blazor.Core.SortDirection.Ascending" />
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => e.FirstName" CustomTitle="First name" />
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => e.LastName" CustomTitle="Last name" />
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => Regex.Replace(e.MobileNbr, pattern, repl)" CustomTitle="Mobile" />

                    <FD.Blazor.Components.DataTableColumn TModel="User" CustomTitle="Enabled" TextAlignment="TextAlignment.Center">
                        <HeaderTemplate Context="title">
                            @title
                        </HeaderTemplate>
                        <RowTemplate Context="item">
                            <InputCheckbox class="custom-control-lg" @bind-Value="@item.IsEnabled" disabled="true"></InputCheckbox>
                        </RowTemplate>
                    </FD.Blazor.Components.DataTableColumn>

                    @*<FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property=@((e) => string.Join("|", e.UserRoles.ToArray())) CustomTitle="Roles" />*@
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => e.Email" />
                </FD.Blazor.Components.DataTable>

            </MudDrawerContainer>
        </MudPaper>
    </EditForm>
}

@code {
    private List<User> displayedItems { get; set; } = new();
    private List<Role> roles { get; set; } = new();
    //private List<User> users = new();
    private bool open = false;

    private string SortColumn { get; set; }
    private SortDirection SortDirection { get; set; }
    private const int _numberOfRecords = 250;

    private bool _Loading { get; set; }
    private int _Records { get; set; }
    private int _StartIndex { get; set; }

    private DataTable<User> _table;

    private User curUser;
    private EditContext editContext;

    /// <summary>
    /// Loading property allow to control when to show the spinner and disabled some controls to avoid issues during data loading.
    /// </summary>
    private bool Loading
    {
        get { return _Loading; }
        set
        {
            if (_Loading != value)
            {
                _Loading = value;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task OnRowClicked(User user)
    {
        await Task.Run(() =>
        {
            if (curUser == user)
                open = !open;
            else
            {
                curUser = user;
                open = true;
            }
        });
    }

    private async Task OnRoleChecked(Role role, bool Checked)
    {
        if (Checked)
        {
            ICollection<Role> _roles = curUser?.Roles ?? new List<Role>();
            _roles.Add(role);
            curUser.Roles = _roles;
            //curUser.Roles.Add(role);
        }
        else
            curUser.Roles.Remove(role);
        await DataService.EditUser(curUser);
    }

    protected override async Task OnInitializedAsync()
    {
        roles = await DataService.GetRolesAsync(null, "Name", SortDirection.Ascending, 0, 10);
        editContext = new EditContext(displayedItems);
    }

    ///// <summary>
    ///// Load items from database and apply filters.
    ///// </summary>
    ///// <returns></returns>
    private async Task LoadData(int? startIndex = 0, int? numberOfRecords = _numberOfRecords)
    {
        // updates the _StartIndex, it gets resetted when no parameters are received (like when applying a new filter)
        _StartIndex = (int)startIndex;

        //await SaveSelection(displayedItems);

        // if this is the first time (not initialized) we set the default sort column and direction
        if (SortColumn == null)
        {
            SortColumn = _table.DefaultSortColumn;
            SortDirection = _table.DefaultSortDirection;
        }

        // get filters currently applied in form of a expression and request the records that match the conditions
        // also pass the sorting column/direction, starting index and numbers of records to request
        displayedItems = await DataService.GetUsersAsync(null, SortColumn, SortDirection, _StartIndex, (int)numberOfRecords);

        //await RestoreSelection(displayedItems);
    }

    /// <summary>
    /// Hides MudDrawer and clear current datatable selection.
    /// </summary>
    /// <returns></returns>
    private async Task CloseAndClear()
    {
        await Task.Run(() =>
        {
            open = false;
            _table?.ClearSelection();
        });
    }

    /// <summary>
    /// Allows to set a new password for current user.
    /// </summary>
    /// <returns></returns>
    private async Task resetPassword()
    {
        var parms = new DialogParameters {
            ["User"] = curUser
        };
        var dialog = DialogService.Show<DialogPasswordReset>("Confirm action", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            //TODO: call user service to save password
            curUser = (User)result.Data;

            Snackbar.Add($"Password resetted", Severity.Success);
        }
    }

    private async Task blockSignIn()
    {
        string actionStr = ((curUser?.IsEnabled) ?? false) ? "block" : "allow";
        var parms = new DialogParameters {
            ["Icon"] = Icons.Material.Filled.Warning,
            ["Content"] = $"Do you want to {actionStr} sign in for user {curUser?.UserName}?"
        };
        var dialog = DialogService.Show<DialogConfirm>("Confirm action", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            curUser = await DataService.SignIn(curUser, !curUser.IsEnabled);
            Snackbar.Add($"User {curUser?.UserName} {actionStr}ed for sign in", Severity.Success);
            await _table.Refresh();
        }
    }

    private async Task deleteUser()
    {
        var parms = new DialogParameters {
            ["Icon"] = Icons.Material.Filled.Warning,
            ["Content"] = $"Do you want to delete user {curUser?.UserName}?"
        };
        var dialog = DialogService.Show<DialogConfirm>("Warning", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await DataService.DeleteUser(curUser);
            await CloseAndClear();
            Snackbar.Add($"User {curUser?.UserName} deleted", Severity.Success);
            await _table.Refresh();
        }
    }

    private async Task addUser()
    {
        var parms = new DialogParameters
        {
            ["User"] = new User(),
            ["Action"] = UserAction.Add
        };
        var dialog = DialogService.Show<DialogUserDetails>("Add", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            //TODO: call user service to add new user
            curUser = (User) result.Data;
            //users.Add(curUser);
            await DataService.AddUser(curUser);

            Snackbar.Add($"User {curUser.UserName} created", Severity.Success);
            await _table.Refresh();
        }
    }

    private async Task editUser()
    {
        var parms = new DialogParameters
        {
            ["User"] = curUser,
            ["Action"] = UserAction.Edit
        };
        var dialog = DialogService.Show<DialogUserDetails>("Edit", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            //TODO: call user service to save changes
            curUser = (User) result.Data;
            await DataService.EditUser(curUser);

            await CloseAndClear();
            Snackbar.Add($"Changes saved", Severity.Success);
            await _table.Refresh();
        }
    }

    //private async Task exportUser()
    //{
    //    //DialogTitle = "Action";
    //    //DialogMessage = $"Do you want to export user {curUser?.UserName}?";
    //    //showModal = true;
    //}

    //private async Task manageRoles()
    //{
    //    //DialogTitle = "Action";
    //    //DialogMessage = $"Do you want to change user {curUser.UserName} roles?";
    //    //showModal = true;
    //}

    /// <summary>
    /// ItemProvider for Virtualize component, this will retrieve the data from our service and manage records that will be shown.
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    protected async ValueTask<ItemsProviderResult<User>> LoadUsers(ItemsProviderRequest request)
    {
        Loading = true;

        // request new items from startindex, currently requesting 100 items
        await LoadData(request.StartIndex);

        // updates the record count with current filters applied
        if (_Records == 0)
            await UpdateCounter(await DataService.GetUsersCountAsync(null));

        Loading = false;
        return new ItemsProviderResult<User>(displayedItems, _Records);
    }

    /// <summary>
    /// Updates the record counter if current records retrieved has changed.
    /// </summary>
    /// <param name="count"></param>
    /// <returns></returns>
    protected async Task UpdateCounter(int count)
    {
        if (_Records != count)
        {
            _Records = count;
            await InvokeAsync(StateHasChanged);
        }
    }
}

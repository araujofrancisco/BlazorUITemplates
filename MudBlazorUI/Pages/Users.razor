@page "/users"

@using System.Text.RegularExpressions

@inject UserService UserService

@inject IDialogService DialogService
@inject ISnackbar Snackbar

<h1>User management</h1>

<MudToolBar Style="padding-left: 0;">
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.PersonAddAlt1" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="addUser">Add a user</MudButton>
    @*<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="refresh">Refresh</MudButton>*@
    @*<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.PersonRemove" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="deleteUser">Delete user</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.VpnKey" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="resetPassword">Reset password</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.SupervisedUserCircle" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="manageRoles">Manage roles</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.Download" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="exportUser">Export user</MudButton>
    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.AlternateEmail" Color="Color.Inherit" Style="text-transform:none" Size="Size.Small" OnClick="editUser">Manage username and email</MudButton>*@
</MudToolBar>

@{
    string pattern = @"([(])?([+])?(\d{1})(\d{3})(\d{3})(\d{4})([)])?";
    string repl = @"+$3 ($4) $5-$6";
}

@if (editContext == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <style>
        .table table-stripped {
            color: darkred !important;
        }
    </style>

    <EditForm EditContext="editContext">
        <MudPaper Height="100vh" Style="overflow:hidden; position:relative;">
            <MudDrawerContainer Class="mud-height-full" Style="display: grid; overflow: auto;">

                <MudDrawer @bind-Open="@open" Fixed="false" Width="450px" MiniWidth="300px" Anchor="Anchor.End" Elevation="2" Variant="@DrawerVariant.Persistent" Color="Color.Primary">
                    @if (curUser != null)
                    {
                        <div style="display: flex;justify-content: left; justify-items: left;">
                            <MudIconButton Icon="@Icons.Material.Filled.East" OnClick="@CloseAndClear" />
                            <MudDrawerHeader Style="display: grid;justify-content: center; justify-items: center;">
                                <MudText Typo="Typo.h6">@curUser.FirstName @curUser.LastName</MudText>
                                <MudContainer Style="display: flex;">
                                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.VpnKey" OnClick="resetPassword" Color="Color.Inherit"
                                               Style="text-transform: none; font-size: x-small;" Size="Size.Small">Reset password</MudButton>
                                    <MudButton Variant="Variant.Text" StartIcon=@(curUser.IsEnabled ? Icons.Material.Outlined.Block : Icons.Material.Outlined.Check) OnClick="blockSignIn" Color="Color.Inherit"
                                               Style="text-transform: none; font-size: x-small;" Size="Size.Small">@(curUser.IsEnabled ? "Block sign-in" : "Allow sign-in")</MudButton>
                                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.PersonRemove" OnClick="deleteUser" Color="Color.Inherit"
                                               Style="text-transform: none; font-size: x-small;" Size="Size.Small">Delete user</MudButton>
                                </MudContainer>
                            </MudDrawerHeader>
                        </div>

                        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Color="Color.Dark" SliderColor="Color.Tertiary">
                            <MudTabPanel Text="Account">
                                <MudText>Username and email</MudText>
                                <p class="pt-1">
                                    <MudText>@curUser.Email</MudText>
                                    @*<MudLink Href="/" Target="_self" Color="Color.Warning" Style="cursor: pointer;">Manage username and email</MudLink>*@
                                    <div style="margin-top: 5px;">
                                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="editUser">Manage username and email</MudButton>
                                    </div>
                                </p>
                            </MudTabPanel>
                            @*<MudTabPanel Text="Devices">
                    <MudText>Content Two</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Licenses and apps">
                    <MudText>Content Three</MudText>
                </MudTabPanel>
                <MudTabPanel Text="Mail" Disabled="true">
                    <MudText>Content Disabled</MudText>
                </MudTabPanel>*@
                        </MudTabs>
                    }
                </MudDrawer>

                <FD.Blazor.Components.DataTable @ref="_table" TModel="User" Items="LoadUsers" RowClickedEvent="OnRowClicked"
                                                SortChanged="(c, d) => { this.SortColumn = c; this.SortDirection = d; }"
                                                ContainerCssClass="d-flex justify-center align-center mud-height-full"
                                                ContainerAttributes=@(new Dictionary<string, object>() { { "style", "width: 100%;" } })
                                                Styles=@(FD.Blazor.Core.TableStyle.Striped | FD.Blazor.Core.TableStyle.Hover)
                                                TableAttributes=@(new Dictionary<string, object>() { { "style", "width: 100%;" } })
                                                AllowRowSelection="true"
                                                HideVirtualizePlaceholder="true" VirtualizePlaceholder=@((e) => e.AddMarkupContent(1,"<p><em>Loading...</em></p>"))>
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => e.UserName"
                                                          IsDefaultSortColumn="true" DefaultSortDirection="FD.Blazor.Core.SortDirection.Ascending" />
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => e.FirstName" CustomTitle="First name" />
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => e.LastName" CustomTitle="Last name" />
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => Regex.Replace(e.MobileNbr, pattern, repl)" CustomTitle="Mobile" />

                    <FD.Blazor.Components.DataTableColumn TModel="User" CustomTitle="Enabled" TextAlignment="TextAlignment.Center">
                        <HeaderTemplate Context="title">
                            @title
                        </HeaderTemplate>
                        <RowTemplate Context="item">
                            <InputCheckbox class="custom-control-lg" @bind-Value="@item.IsEnabled" disabled="true"></InputCheckbox>
                        </RowTemplate>
                    </FD.Blazor.Components.DataTableColumn>

                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property=@((e) => string.Join("/", e.UserRoles.ToArray())) CustomTitle="Roles" />
                    <FD.Blazor.Components.DataTableColumn TModel="User" IsSortable="true" Property="(e) => e.Email" />
                </FD.Blazor.Components.DataTable>

            </MudDrawerContainer>
        </MudPaper>
    </EditForm>
}
@*<CustomDialog TModel="User" ShowModal=@showModal OnChange="DialogChange" ShowCancelButton="true">
    <HeaderContent>
        @DialogTitle
    </HeaderContent>

    <BodyContent>
        @DialogMessage
    </BodyContent>

    <FooterContent />
</CustomDialog>*@


@code {
    private List<User> users = new();
    private bool open = false;

    private string SortColumn { get; set; }
    private FD.Blazor.Core.SortDirection SortDirection { get; set; }

    private DataTable<User> _table;

    private User curUser;
    private EditContext editContext;

    //private string DialogTitle { get; set; }
    //private string DialogMessage { get; set; }
    //private bool showModal = false;

    //private void DialogChange(User user)
    //{
    //    showModal = false;
    //}

    private async Task OnRowClicked(User user)
    {
        await Task.Run(() =>
        {
            if (curUser == user)
                open = !open;
            else
            {
                curUser = user;
                open = true;
            }
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { editContext = new EditContext(users); });
    }

    private async Task CloseAndClear()
    {
        await Task.Run(() =>
        {
            open = false;
            _table?.ClearSelection();
        });
    }

    private async Task resetPassword()
    {
        var parms = new DialogParameters {
            ["Icon"] = Icons.Material.Filled.Warning,
            ["Content"] = $"Do you want to reset password for user {curUser?.UserName}?"
        };
        var dialog = DialogService.Show<DialogConfirm>("Confirm action", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Snackbar.Add($"Password resetted", Severity.Success);
        }
    }

    private async Task blockSignIn()
    {
        string actionStr = ((curUser?.IsEnabled) ?? false) ? "block" : "allow";
        var parms = new DialogParameters {
            ["Icon"] = Icons.Material.Filled.Warning,
            ["Content"] = $"Do you want to {actionStr} sign in for user {curUser?.UserName}?"
        };
        var dialog = DialogService.Show<DialogConfirm>("Confirm action", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await UserService.ToggleSignIn(curUser);
            Snackbar.Add($"User {curUser?.UserName} {actionStr}ed for sign in", Severity.Success);
        }
    }

    private async Task deleteUser()
    {
        var parms = new DialogParameters {
            ["Icon"] = Icons.Material.Filled.Warning,
            ["Content"] = $"Do you want to delete user {curUser?.UserName}?"
        };
        var dialog = DialogService.Show<DialogConfirm>("Warning", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            users.Remove(curUser);
            await CloseAndClear();
            Snackbar.Add($"User {curUser?.UserName} deleted", Severity.Success);
        }

        //bool? result = await DialogService.ShowMessageBox(
        //"Warning",
        //$"Do you want to delete user {curUser?.UserName}?",
        //yesText: "Delete!", cancelText: "Cancel");

        //if (result != null)
        //{
        //    users.Remove(curUser);
        //    open = false;
        //    Snackbar.Add($"User {curUser?.UserName} deleted", Severity.Success);
        //}
    }

    private async Task addUser()
    {
        var parms = new DialogParameters
        {
            ["User"] = new User(),
            ["Action"] = UserAction.Add
        };
        var dialog = DialogService.Show<DialogUserDetails>("Add", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            curUser = (User) result.Data;
            users.Add(curUser);
            Snackbar.Add($"User {curUser.UserName} created", Severity.Success);
        }
    }

    private async Task editUser()
    {
        var parms = new DialogParameters
        {
            ["User"] = curUser,
            ["Action"] = UserAction.Edit
        };
        var dialog = DialogService.Show<DialogUserDetails>("Edit", parms);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await CloseAndClear();
            Snackbar.Add($"Changes saved", Severity.Success);
        }
    }

    //private async Task exportUser()
    //{
    //    //DialogTitle = "Action";
    //    //DialogMessage = $"Do you want to export user {curUser?.UserName}?";
    //    //showModal = true;
    //}

    //private async Task manageRoles()
    //{
    //    //DialogTitle = "Action";
    //    //DialogMessage = $"Do you want to change user {curUser.UserName} roles?";
    //    //showModal = true;
    //}

    /// <summary>
    /// ItemProvider for Virtualize component, this will retrieve the data from our service and manage records that will be shown.
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    protected async ValueTask<ItemsProviderResult<User>> LoadUsers(ItemsProviderRequest request)
    {
        users = await UserService.GetUserAsync();
        if (SortColumn != null) users = (SortDirection == FD.Blazor.Core.SortDirection.Ascending) ? users.OrderBy(SortColumn).ToList() : users.OrderByDescending(SortColumn).ToList();
        return new ItemsProviderResult<User>(users.Skip(request.StartIndex).Take(request.Count), users.Count());
    }
}
